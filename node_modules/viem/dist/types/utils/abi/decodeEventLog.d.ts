import type { Abi, Narrow } from 'abitype';
import type { GetEventArgsFromTopics, InferEventName, Hex } from '../../types/index.js';
export type DecodeEventLogParameters<TAbi extends Abi | readonly unknown[] = Abi, TEventName extends string = string, TTopics extends Hex[] = Hex[], TData extends Hex | undefined = undefined> = {
    abi: Narrow<TAbi>;
    data?: TData;
    eventName?: InferEventName<TAbi, TEventName>;
    topics: [signature: Hex, ...args: TTopics] | [];
};
export type DecodeEventLogReturnType<TAbi extends Abi | readonly unknown[] = Abi, TEventName extends string = string, TTopics extends Hex[] = Hex[], TData extends Hex | undefined = undefined> = {
    eventName: TEventName;
} & GetEventArgsFromTopics<TAbi, TEventName, TTopics, TData>;
export declare function decodeEventLog<TAbi extends Abi | readonly unknown[], TEventName extends string, TTopics extends Hex[], TData extends Hex | undefined = undefined>({ abi, data, topics, }: DecodeEventLogParameters<TAbi, TEventName, TTopics, TData>): DecodeEventLogReturnType<TAbi, TEventName, TTopics, TData>;
//# sourceMappingURL=decodeEventLog.d.ts.map