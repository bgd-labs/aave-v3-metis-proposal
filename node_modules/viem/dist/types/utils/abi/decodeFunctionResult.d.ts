import type { Abi, Narrow } from 'abitype';
import type { GetFunctionArgs, InferFunctionName, ContractFunctionResult, Hex } from '../../types/index.js';
export type DecodeFunctionResultParameters<TAbi extends Abi | readonly unknown[] = Abi, TFunctionName extends string = string> = {
    abi: Narrow<TAbi>;
    functionName: InferFunctionName<TAbi, TFunctionName>;
    data: Hex;
} & Partial<GetFunctionArgs<TAbi, TFunctionName>>;
export type DecodeFunctionResultReturnType<TAbi extends Abi | readonly unknown[] = Abi, TFunctionName extends string = string> = ContractFunctionResult<TAbi, TFunctionName>;
export declare function decodeFunctionResult<TAbi extends Abi | readonly unknown[], TFunctionName extends string>({ abi, args, functionName, data, }: DecodeFunctionResultParameters<TAbi, TFunctionName>): DecodeFunctionResultReturnType<TAbi, TFunctionName>;
//# sourceMappingURL=decodeFunctionResult.d.ts.map