import type { Chain, Block, Formatter, Formatters, RpcBlock } from '../../types/index.js';
import type { ExtractFormatter, Formatted } from './format.js';
export type BlockFormatter<TChain extends Chain | undefined = Chain> = TChain extends Chain ? ExtractFormatter<TChain, 'block', NonNullable<Formatters['block']>> : Formatters['block'];
export type FormattedBlock<TFormatter extends Formatter | undefined = Formatter> = Formatted<TFormatter, Block>;
export declare function formatBlock(block: Partial<RpcBlock>): Block;
export declare const defineBlock: <TFormat extends Formatter<Partial<RpcBlock>, Partial<Block> & {
    [key: string]: unknown;
}>, TExclude extends (keyof RpcBlock)[] = []>({ exclude, format: formatOverride, }: {
    exclude?: TExclude | undefined;
    format?: TFormat | undefined;
}) => (data: Partial<RpcBlock> & {
    [key: string]: unknown;
}) => Block & ReturnType<TFormat> & { [K in TExclude[number]]: never; };
//# sourceMappingURL=block.d.ts.map