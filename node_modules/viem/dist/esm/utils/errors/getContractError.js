import { AbiDecodingZeroDataError, ContractFunctionExecutionError, EstimateGasExecutionError, RawContractError, } from '../../errors/index.js';
import { CallExecutionError, ContractFunctionRevertedError, ContractFunctionZeroDataError, } from '../../errors/contract.js';
const EXECUTION_REVERTED_ERROR_CODE = 3;
export function getContractError(err, { abi, address, args, docsPath, functionName, sender, }) {
    const { code, data, message, shortMessage } = (err instanceof RawContractError
        ? err
        : !(err.cause && 'data' in err.cause) &&
            (err instanceof CallExecutionError ||
                err instanceof EstimateGasExecutionError)
            ? err.cause?.cause?.cause || {}
            : err.cause || {});
    let cause = err;
    if (err instanceof AbiDecodingZeroDataError) {
        cause = new ContractFunctionZeroDataError({ functionName });
    }
    else if (code === EXECUTION_REVERTED_ERROR_CODE &&
        (data || message || shortMessage)) {
        cause = new ContractFunctionRevertedError({
            abi,
            data,
            functionName,
            message: shortMessage ?? message,
        });
    }
    return new ContractFunctionExecutionError(cause, {
        abi,
        args,
        contractAddress: address,
        docsPath,
        functionName,
        sender,
    });
}
//# sourceMappingURL=getContractError.js.map