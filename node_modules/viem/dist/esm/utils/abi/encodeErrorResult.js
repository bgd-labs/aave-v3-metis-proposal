import { AbiErrorInputsNotFoundError, AbiErrorNotFoundError, } from '../../errors/index.js';
import { concatHex } from '../data/index.js';
import { getFunctionSelector } from '../hash/index.js';
import { encodeAbiParameters } from './encodeAbiParameters.js';
import { formatAbiItem } from './formatAbiItem.js';
import { getAbiItem } from './getAbiItem.js';
const docsPath = '/docs/contract/encodeErrorResult';
export function encodeErrorResult({ abi, errorName, args }) {
    const description = getAbiItem({
        abi,
        args,
        name: errorName,
    });
    if (!description)
        throw new AbiErrorNotFoundError(errorName, { docsPath });
    const definition = formatAbiItem(description);
    const signature = getFunctionSelector(definition);
    let data = '0x';
    if (args && args.length > 0) {
        if (!('inputs' in description && description.inputs))
            throw new AbiErrorInputsNotFoundError(errorName, { docsPath });
        data = encodeAbiParameters(description.inputs, args);
    }
    return concatHex([signature, data]);
}
//# sourceMappingURL=encodeErrorResult.js.map