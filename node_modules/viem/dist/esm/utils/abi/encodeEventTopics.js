import { AbiEventNotFoundError, FilterTypeNotSupportedError, } from '../../errors/index.js';
import { toBytes } from '../encoding/index.js';
import { getEventSelector, keccak256 } from '../hash/index.js';
import { encodeAbiParameters } from './encodeAbiParameters.js';
import { formatAbiItem } from './formatAbiItem.js';
import { getAbiItem } from './getAbiItem.js';
export function encodeEventTopics({ abi, eventName, args }) {
    const abiItem = getAbiItem({
        abi,
        args,
        name: eventName,
    });
    if (!abiItem)
        throw new AbiEventNotFoundError(eventName, {
            docsPath: '/docs/contract/encodeEventTopics',
        });
    const definition = formatAbiItem(abiItem);
    const signature = getEventSelector(definition);
    let topics = [];
    if (args && 'inputs' in abiItem) {
        const args_ = Array.isArray(args)
            ? args
            : abiItem.inputs?.map((x) => args[x.name]) ?? [];
        topics =
            abiItem.inputs
                ?.filter((param) => 'indexed' in param && param.indexed)
                .map((param, i) => Array.isArray(args_[i])
                ? args_[i].map((_, j) => encodeArg({ param, value: args_[i][j] }))
                : args_[i]
                    ? encodeArg({ param, value: args_[i] })
                    : null) ?? [];
    }
    return [signature, ...topics];
}
function encodeArg({ param, value, }) {
    if (param.type === 'string' || param.type === 'bytes')
        return keccak256(toBytes(value));
    if (param.type === 'tuple' || param.type.match(/^(.*)\[(\d+)?\]$/))
        throw new FilterTypeNotSupportedError(param.type);
    return encodeAbiParameters([param], [value]);
}
//# sourceMappingURL=encodeEventTopics.js.map