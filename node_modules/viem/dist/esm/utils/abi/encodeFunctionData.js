import { AbiFunctionNotFoundError } from '../../errors/index.js';
import { concatHex } from '../data/index.js';
import { getFunctionSelector } from '../hash/index.js';
import { encodeAbiParameters } from './encodeAbiParameters.js';
import { formatAbiItem } from './formatAbiItem.js';
import { getAbiItem } from './getAbiItem.js';
export function encodeFunctionData({ abi, args, functionName, }) {
    const description = getAbiItem({
        abi,
        args,
        name: functionName,
    });
    if (!description)
        throw new AbiFunctionNotFoundError(functionName, {
            docsPath: '/docs/contract/encodeFunctionData',
        });
    const definition = formatAbiItem(description);
    const signature = getFunctionSelector(definition);
    const data = 'inputs' in description && description.inputs
        ? encodeAbiParameters(description.inputs, (args ?? []))
        : undefined;
    return concatHex([signature, data ?? '0x']);
}
//# sourceMappingURL=encodeFunctionData.js.map