import { dropTransaction, getAutomine, getTxpoolContent, getTxpoolStatus, impersonateAccount, increaseTime, inspectTxpool, mine, removeBlockTimestampInterval, reset, revert, sendUnsignedTransaction, setAutomine, setBalance, setBlockGasLimit, setBlockTimestampInterval, setCode, setCoinbase, setIntervalMining, setLoggingEnabled, setMinGasPrice, setNextBlockBaseFeePerGas, setNextBlockTimestamp, setNonce, setRpcUrl, setStorageAt, snapshot, stopImpersonatingAccount, } from '../../actions/test/index.js';
export function testActions(client) {
    return {
        dropTransaction: (args) => dropTransaction(client, args),
        getAutomine: () => getAutomine(client),
        getTxpoolContent: () => getTxpoolContent(client),
        getTxpoolStatus: () => getTxpoolStatus(client),
        impersonateAccount: (args) => impersonateAccount(client, args),
        increaseTime: (args) => increaseTime(client, args),
        inspectTxpool: () => inspectTxpool(client),
        mine: (args) => mine(client, args),
        removeBlockTimestampInterval: () => removeBlockTimestampInterval(client),
        reset: (args) => reset(client, args),
        revert: (args) => revert(client, args),
        sendUnsignedTransaction: (args) => sendUnsignedTransaction(client, args),
        setAutomine: (args) => setAutomine(client, args),
        setBalance: (args) => setBalance(client, args),
        setBlockGasLimit: (args) => setBlockGasLimit(client, args),
        setBlockTimestampInterval: (args) => setBlockTimestampInterval(client, args),
        setCode: (args) => setCode(client, args),
        setCoinbase: (args) => setCoinbase(client, args),
        setIntervalMining: (args) => setIntervalMining(client, args),
        setLoggingEnabled: (args) => setLoggingEnabled(client, args),
        setMinGasPrice: (args) => setMinGasPrice(client, args),
        setNextBlockBaseFeePerGas: (args) => setNextBlockBaseFeePerGas(client, args),
        setNextBlockTimestamp: (args) => setNextBlockTimestamp(client, args),
        setNonce: (args) => setNonce(client, args),
        setRpcUrl: (args) => setRpcUrl(client, args),
        setStorageAt: (args) => setStorageAt(client, args),
        snapshot: () => snapshot(client),
        stopImpersonatingAccount: (args) => stopImpersonatingAccount(client, args),
    };
}
//# sourceMappingURL=test.js.map