import { AccountNotFoundError, ChainMismatchError, ChainNotFoundError, } from '../../errors/index.js';
import { assertRequest, extract, format, formatTransactionRequest, getTransactionError, parseAccount, prepareRequest, } from '../../utils/index.js';
import { getChainId } from '../public/index.js';
export async function sendTransaction(client, args) {
    const { account: account_ = client.account, chain = client.chain, accessList, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, ...rest } = args;
    if (!account_)
        throw new AccountNotFoundError({
            docsPath: '/docs/actions/wallet/sendTransaction',
        });
    const account = parseAccount(account_);
    try {
        assertRequest(args);
        const chainId = await getChainId(client);
        if (chain !== null && chainId !== chain?.id) {
            if (!chain)
                throw new ChainNotFoundError();
            throw new ChainMismatchError({ chain, currentChainId: chainId });
        }
        if (account.type === 'local') {
            const request = await prepareRequest(client, {
                account,
                accessList,
                chain,
                data,
                gas,
                gasPrice,
                maxFeePerGas,
                maxPriorityFeePerGas,
                nonce,
                to,
                value,
                ...rest,
            });
            const signedRequest = (await account.signTransaction({
                chainId,
                ...request,
            }));
            return await client.request({
                method: 'eth_sendRawTransaction',
                params: [signedRequest],
            });
        }
        const formatter = chain?.formatters?.transactionRequest;
        const request = format({
            accessList,
            data,
            from: account.address,
            gas,
            gasPrice,
            maxFeePerGas,
            maxPriorityFeePerGas,
            nonce,
            to,
            value,
            ...extract(rest, { formatter }),
        }, {
            formatter: formatter || formatTransactionRequest,
        });
        return await client.request({
            method: 'eth_sendTransaction',
            params: [request],
        });
    }
    catch (err) {
        throw getTransactionError(err, {
            ...args,
            account,
            chain: args.chain || undefined,
        });
    }
}
//# sourceMappingURL=sendTransaction.js.map