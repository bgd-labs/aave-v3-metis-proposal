import { singleAddressResolverAbi, universalResolverAbi, } from '../../constants/abis.js';
import { decodeFunctionResult, encodeFunctionData, getChainContractAddress, toHex, trim, } from '../../utils/index.js';
import { namehash, packetToBytes } from '../../utils/ens/index.js';
import { readContract } from '../public/index.js';
export async function getEnsAddress(client, { blockNumber, blockTag, name, universalResolverAddress: universalResolverAddress_, }) {
    let universalResolverAddress = universalResolverAddress_;
    if (!universalResolverAddress) {
        if (!client.chain)
            throw new Error('client chain not configured. universalResolverAddress is required.');
        universalResolverAddress = getChainContractAddress({
            blockNumber,
            chain: client.chain,
            contract: 'ensUniversalResolver',
        });
    }
    const res = await readContract(client, {
        address: universalResolverAddress,
        abi: universalResolverAbi,
        functionName: 'resolve',
        args: [
            toHex(packetToBytes(name)),
            encodeFunctionData({
                abi: singleAddressResolverAbi,
                functionName: 'addr',
                args: [namehash(name)],
            }),
        ],
        blockNumber,
        blockTag,
    });
    if (res[0] === '0x')
        return null;
    const address = decodeFunctionResult({
        abi: singleAddressResolverAbi,
        functionName: 'addr',
        data: res[0],
    });
    return trim(address) === '0x0' ? null : address;
}
//# sourceMappingURL=getEnsAddress.js.map