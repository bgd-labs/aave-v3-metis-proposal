import { textResolverAbi, universalResolverAbi } from '../../constants/abis.js';
import { decodeFunctionResult, encodeFunctionData, getChainContractAddress, toHex, } from '../../utils/index.js';
import { namehash, packetToBytes } from '../../utils/ens/index.js';
import { readContract } from '../public/index.js';
export async function getEnsText(client, { blockNumber, blockTag, name, key, universalResolverAddress: universalResolverAddress_, }) {
    let universalResolverAddress = universalResolverAddress_;
    if (!universalResolverAddress) {
        if (!client.chain)
            throw new Error('client chain not configured. universalResolverAddress is required.');
        universalResolverAddress = getChainContractAddress({
            blockNumber,
            chain: client.chain,
            contract: 'ensUniversalResolver',
        });
    }
    const res = await readContract(client, {
        address: universalResolverAddress,
        abi: universalResolverAbi,
        functionName: 'resolve',
        args: [
            toHex(packetToBytes(name)),
            encodeFunctionData({
                abi: textResolverAbi,
                functionName: 'text',
                args: [namehash(name), key],
            }),
        ],
        blockNumber,
        blockTag,
    });
    if (res[0] === '0x')
        return null;
    const record = decodeFunctionResult({
        abi: textResolverAbi,
        functionName: 'text',
        data: res[0],
    });
    return record === '' ? null : record;
}
//# sourceMappingURL=getEnsText.js.map