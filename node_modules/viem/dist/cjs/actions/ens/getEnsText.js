"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnsText = void 0;
const abis_js_1 = require("../../constants/abis.js");
const index_js_1 = require("../../utils/index.js");
const index_js_2 = require("../../utils/ens/index.js");
const index_js_3 = require("../public/index.js");
async function getEnsText(client, { blockNumber, blockTag, name, key, universalResolverAddress: universalResolverAddress_, }) {
    let universalResolverAddress = universalResolverAddress_;
    if (!universalResolverAddress) {
        if (!client.chain)
            throw new Error('client chain not configured. universalResolverAddress is required.');
        universalResolverAddress = (0, index_js_1.getChainContractAddress)({
            blockNumber,
            chain: client.chain,
            contract: 'ensUniversalResolver',
        });
    }
    const res = await (0, index_js_3.readContract)(client, {
        address: universalResolverAddress,
        abi: abis_js_1.universalResolverAbi,
        functionName: 'resolve',
        args: [
            (0, index_js_1.toHex)((0, index_js_2.packetToBytes)(name)),
            (0, index_js_1.encodeFunctionData)({
                abi: abis_js_1.textResolverAbi,
                functionName: 'text',
                args: [(0, index_js_2.namehash)(name), key],
            }),
        ],
        blockNumber,
        blockTag,
    });
    if (res[0] === '0x')
        return null;
    const record = (0, index_js_1.decodeFunctionResult)({
        abi: abis_js_1.textResolverAbi,
        functionName: 'text',
        data: res[0],
    });
    return record === '' ? null : record;
}
exports.getEnsText = getEnsText;
//# sourceMappingURL=getEnsText.js.map