"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.estimateGas = void 0;
const index_js_1 = require("../../errors/index.js");
const index_js_2 = require("../../utils/index.js");
async function estimateGas(client, args) {
    if (!args.account)
        throw new index_js_1.AccountNotFoundError({
            docsPath: '/docs/actions/public/estimateGas',
        });
    const account = (0, index_js_2.parseAccount)(args.account);
    try {
        const { accessList, blockNumber, blockTag = 'latest', data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, ...rest } = account.type === 'local' ? await (0, index_js_2.prepareRequest)(client, args) : args;
        const blockNumberHex = blockNumber ? (0, index_js_2.numberToHex)(blockNumber) : undefined;
        (0, index_js_2.assertRequest)(args);
        const formatter = client.chain?.formatters?.transactionRequest;
        const request = (0, index_js_2.format)({
            from: account.address,
            accessList,
            data,
            gas,
            gasPrice,
            maxFeePerGas,
            maxPriorityFeePerGas,
            nonce,
            to,
            value,
            ...(0, index_js_2.extract)(rest, { formatter }),
        }, {
            formatter: formatter || index_js_2.formatTransactionRequest,
        });
        const balance = await client.request({
            method: 'eth_estimateGas',
            params: [request, blockNumberHex || blockTag],
        });
        return BigInt(balance);
    }
    catch (err) {
        throw (0, index_js_2.getEstimateGasError)(err, {
            ...args,
            account,
            chain: client.chain,
        });
    }
}
exports.estimateGas = estimateGas;
//# sourceMappingURL=estimateGas.js.map