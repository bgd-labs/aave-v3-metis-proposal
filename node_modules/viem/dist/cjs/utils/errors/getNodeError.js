"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNodeError = exports.containsNodeError = void 0;
const index_js_1 = require("../../errors/index.js");
const index_js_2 = require("../../errors/index.js");
function containsNodeError(err) {
    return (err instanceof index_js_2.TransactionRejectedRpcError ||
        err instanceof index_js_2.InvalidInputRpcError ||
        (err instanceof index_js_1.RpcRequestError && err.code === index_js_2.ExecutionRevertedError.code));
}
exports.containsNodeError = containsNodeError;
function getNodeError(err, args) {
    const message = err.details.toLowerCase();
    if (index_js_2.FeeCapTooHighError.nodeMessage.test(message))
        return new index_js_2.FeeCapTooHighError({
            cause: err,
            maxFeePerGas: args?.maxFeePerGas,
        });
    else if (index_js_2.FeeCapTooLowError.nodeMessage.test(message))
        return new index_js_2.FeeCapTooLowError({
            cause: err,
            maxFeePerGas: args?.maxFeePerGas,
        });
    else if (index_js_2.NonceTooHighError.nodeMessage.test(message))
        return new index_js_2.NonceTooHighError({ cause: err, nonce: args?.nonce });
    else if (index_js_2.NonceTooLowError.nodeMessage.test(message))
        return new index_js_2.NonceTooLowError({ cause: err, nonce: args?.nonce });
    else if (index_js_2.NonceMaxValueError.nodeMessage.test(message))
        return new index_js_2.NonceMaxValueError({ cause: err, nonce: args?.nonce });
    else if (index_js_2.InsufficientFundsError.nodeMessage.test(message))
        return new index_js_2.InsufficientFundsError({ cause: err });
    else if (index_js_2.IntrinsicGasTooHighError.nodeMessage.test(message))
        return new index_js_2.IntrinsicGasTooHighError({ cause: err, gas: args?.gas });
    else if (index_js_2.IntrinsicGasTooLowError.nodeMessage.test(message))
        return new index_js_2.IntrinsicGasTooLowError({ cause: err, gas: args?.gas });
    else if (index_js_2.TransactionTypeNotSupportedError.nodeMessage.test(message))
        return new index_js_2.TransactionTypeNotSupportedError({ cause: err });
    else if (index_js_2.TipAboveFeeCapError.nodeMessage.test(message))
        return new index_js_2.TipAboveFeeCapError({
            cause: err,
            maxFeePerGas: args?.maxFeePerGas,
            maxPriorityFeePerGas: args?.maxPriorityFeePerGas,
        });
    else if (message.match(index_js_2.ExecutionRevertedError.nodeMessage) ||
        ('code' in err.cause &&
            err.cause?.code === index_js_2.ExecutionRevertedError.code))
        return new index_js_2.ExecutionRevertedError({
            cause: err,
            message: err.cause.details,
        });
    return new index_js_2.UnknownNodeError({
        cause: err.cause.cause,
    });
}
exports.getNodeError = getNodeError;
//# sourceMappingURL=getNodeError.js.map