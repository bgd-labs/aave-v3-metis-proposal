import { z } from 'zod';

declare const aaveV3SnapshotSchema: z.ZodObject<{
    reserves: z.ZodRecord<z.ZodString, z.ZodObject<{
        isBorrowableInIsolation: z.ZodBoolean;
        borrowCap: z.ZodNumber;
        liquidationBonus: z.ZodNumber;
        underlying: z.ZodString;
        isFrozen: z.ZodBoolean;
        stableDebtToken: z.ZodString;
        variableDebtToken: z.ZodString;
        reserveFactor: z.ZodNumber;
        liquidationProtocolFee: z.ZodNumber;
        usageAsCollateralEnabled: z.ZodBoolean;
        ltv: z.ZodNumber;
        supplyCap: z.ZodNumber;
        debtCeiling: z.ZodNumber;
        borrowingEnabled: z.ZodBoolean;
        isActive: z.ZodBoolean;
        eModeCategory: z.ZodNumber;
        symbol: z.ZodString;
        stableBorrowRateEnabled: z.ZodBoolean;
        isFlashloanable: z.ZodBoolean;
        aToken: z.ZodString;
        liquidationThreshold: z.ZodNumber;
        aTokenImpl: z.ZodString;
        stableDebtTokenImpl: z.ZodString;
        interestRateStrategy: z.ZodString;
        variableDebtTokenImpl: z.ZodString;
        oracleLatestAnswer: z.ZodNumber;
        oracle: z.ZodString;
        oracleDecimals: z.ZodNumber;
        oracleName: z.ZodString;
        oracleDescription: z.ZodString;
        decimals: z.ZodNumber;
        isSiloed: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        isBorrowableInIsolation?: boolean;
        borrowCap?: number;
        liquidationBonus?: number;
        underlying?: string;
        isFrozen?: boolean;
        stableDebtToken?: string;
        variableDebtToken?: string;
        reserveFactor?: number;
        liquidationProtocolFee?: number;
        usageAsCollateralEnabled?: boolean;
        ltv?: number;
        supplyCap?: number;
        debtCeiling?: number;
        borrowingEnabled?: boolean;
        isActive?: boolean;
        eModeCategory?: number;
        symbol?: string;
        stableBorrowRateEnabled?: boolean;
        isFlashloanable?: boolean;
        aToken?: string;
        liquidationThreshold?: number;
        aTokenImpl?: string;
        stableDebtTokenImpl?: string;
        interestRateStrategy?: string;
        variableDebtTokenImpl?: string;
        oracleLatestAnswer?: number;
        oracle?: string;
        oracleDecimals?: number;
        oracleName?: string;
        oracleDescription?: string;
        decimals?: number;
        isSiloed?: boolean;
    }, {
        isBorrowableInIsolation?: boolean;
        borrowCap?: number;
        liquidationBonus?: number;
        underlying?: string;
        isFrozen?: boolean;
        stableDebtToken?: string;
        variableDebtToken?: string;
        reserveFactor?: number;
        liquidationProtocolFee?: number;
        usageAsCollateralEnabled?: boolean;
        ltv?: number;
        supplyCap?: number;
        debtCeiling?: number;
        borrowingEnabled?: boolean;
        isActive?: boolean;
        eModeCategory?: number;
        symbol?: string;
        stableBorrowRateEnabled?: boolean;
        isFlashloanable?: boolean;
        aToken?: string;
        liquidationThreshold?: number;
        aTokenImpl?: string;
        stableDebtTokenImpl?: string;
        interestRateStrategy?: string;
        variableDebtTokenImpl?: string;
        oracleLatestAnswer?: number;
        oracle?: string;
        oracleDecimals?: number;
        oracleName?: string;
        oracleDescription?: string;
        decimals?: number;
        isSiloed?: boolean;
    }>>;
    strategies: z.ZodRecord<z.ZodString, z.ZodObject<{
        baseStableBorrowRate: z.ZodString;
        maxExcessStableToTotalDebtRatio: z.ZodString;
        address: z.ZodString;
        baseVariableBorrowRate: z.ZodString;
        stableRateSlope2: z.ZodString;
        optimalUsageRatio: z.ZodString;
        variableRateSlope2: z.ZodString;
        optimalStableToTotalDebtRatio: z.ZodString;
        maxExcessUsageRatio: z.ZodString;
        stableRateSlope1: z.ZodString;
        variableRateSlope1: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        baseStableBorrowRate?: string;
        maxExcessStableToTotalDebtRatio?: string;
        address?: string;
        baseVariableBorrowRate?: string;
        stableRateSlope2?: string;
        optimalUsageRatio?: string;
        variableRateSlope2?: string;
        optimalStableToTotalDebtRatio?: string;
        maxExcessUsageRatio?: string;
        stableRateSlope1?: string;
        variableRateSlope1?: string;
    }, {
        baseStableBorrowRate?: string;
        maxExcessStableToTotalDebtRatio?: string;
        address?: string;
        baseVariableBorrowRate?: string;
        stableRateSlope2?: string;
        optimalUsageRatio?: string;
        variableRateSlope2?: string;
        optimalStableToTotalDebtRatio?: string;
        maxExcessUsageRatio?: string;
        stableRateSlope1?: string;
        variableRateSlope1?: string;
    }>>;
    eModes: z.ZodRecord<z.ZodString, z.ZodObject<{
        eModeCategory: z.ZodNumber;
        liquidationBonus: z.ZodNumber;
        label: z.ZodString;
        liquidationThreshold: z.ZodNumber;
        priceSource: z.ZodString;
        ltv: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        eModeCategory?: number;
        liquidationBonus?: number;
        label?: string;
        liquidationThreshold?: number;
        priceSource?: string;
        ltv?: number;
    }, {
        eModeCategory?: number;
        liquidationBonus?: number;
        label?: string;
        liquidationThreshold?: number;
        priceSource?: string;
        ltv?: number;
    }>>;
    poolConfig: z.ZodObject<{
        oracle: z.ZodString;
        pool: z.ZodString;
        poolAddressesProvider: z.ZodString;
        poolConfigurator: z.ZodString;
        poolConfiguratorImpl: z.ZodString;
        poolImpl: z.ZodString;
        protocolDataProvider: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        oracle?: string;
        pool?: string;
        poolAddressesProvider?: string;
        poolConfigurator?: string;
        poolConfiguratorImpl?: string;
        poolImpl?: string;
        protocolDataProvider?: string;
    }, {
        oracle?: string;
        pool?: string;
        poolAddressesProvider?: string;
        poolConfigurator?: string;
        poolConfiguratorImpl?: string;
        poolImpl?: string;
        protocolDataProvider?: string;
    }>;
    chainId: z.ZodNativeEnum<{
        readonly MAINNET: 1;
        readonly OPTIMISM: 10;
        readonly POLYGON: 137;
        readonly FANTOM: 250;
        readonly ARBITRUM: 42161;
        readonly AVALANCHE: 43114;
    }>;
}, "strip", z.ZodTypeAny, {
    reserves?: Record<string, {
        isBorrowableInIsolation?: boolean;
        borrowCap?: number;
        liquidationBonus?: number;
        underlying?: string;
        isFrozen?: boolean;
        stableDebtToken?: string;
        variableDebtToken?: string;
        reserveFactor?: number;
        liquidationProtocolFee?: number;
        usageAsCollateralEnabled?: boolean;
        ltv?: number;
        supplyCap?: number;
        debtCeiling?: number;
        borrowingEnabled?: boolean;
        isActive?: boolean;
        eModeCategory?: number;
        symbol?: string;
        stableBorrowRateEnabled?: boolean;
        isFlashloanable?: boolean;
        aToken?: string;
        liquidationThreshold?: number;
        aTokenImpl?: string;
        stableDebtTokenImpl?: string;
        interestRateStrategy?: string;
        variableDebtTokenImpl?: string;
        oracleLatestAnswer?: number;
        oracle?: string;
        oracleDecimals?: number;
        oracleName?: string;
        oracleDescription?: string;
        decimals?: number;
        isSiloed?: boolean;
    }>;
    strategies?: Record<string, {
        baseStableBorrowRate?: string;
        maxExcessStableToTotalDebtRatio?: string;
        address?: string;
        baseVariableBorrowRate?: string;
        stableRateSlope2?: string;
        optimalUsageRatio?: string;
        variableRateSlope2?: string;
        optimalStableToTotalDebtRatio?: string;
        maxExcessUsageRatio?: string;
        stableRateSlope1?: string;
        variableRateSlope1?: string;
    }>;
    eModes?: Record<string, {
        eModeCategory?: number;
        liquidationBonus?: number;
        label?: string;
        liquidationThreshold?: number;
        priceSource?: string;
        ltv?: number;
    }>;
    poolConfig?: {
        oracle?: string;
        pool?: string;
        poolAddressesProvider?: string;
        poolConfigurator?: string;
        poolConfiguratorImpl?: string;
        poolImpl?: string;
        protocolDataProvider?: string;
    };
    chainId?: 1 | 10 | 137 | 250 | 42161 | 43114;
}, {
    reserves?: Record<string, {
        isBorrowableInIsolation?: boolean;
        borrowCap?: number;
        liquidationBonus?: number;
        underlying?: string;
        isFrozen?: boolean;
        stableDebtToken?: string;
        variableDebtToken?: string;
        reserveFactor?: number;
        liquidationProtocolFee?: number;
        usageAsCollateralEnabled?: boolean;
        ltv?: number;
        supplyCap?: number;
        debtCeiling?: number;
        borrowingEnabled?: boolean;
        isActive?: boolean;
        eModeCategory?: number;
        symbol?: string;
        stableBorrowRateEnabled?: boolean;
        isFlashloanable?: boolean;
        aToken?: string;
        liquidationThreshold?: number;
        aTokenImpl?: string;
        stableDebtTokenImpl?: string;
        interestRateStrategy?: string;
        variableDebtTokenImpl?: string;
        oracleLatestAnswer?: number;
        oracle?: string;
        oracleDecimals?: number;
        oracleName?: string;
        oracleDescription?: string;
        decimals?: number;
        isSiloed?: boolean;
    }>;
    strategies?: Record<string, {
        baseStableBorrowRate?: string;
        maxExcessStableToTotalDebtRatio?: string;
        address?: string;
        baseVariableBorrowRate?: string;
        stableRateSlope2?: string;
        optimalUsageRatio?: string;
        variableRateSlope2?: string;
        optimalStableToTotalDebtRatio?: string;
        maxExcessUsageRatio?: string;
        stableRateSlope1?: string;
        variableRateSlope1?: string;
    }>;
    eModes?: Record<string, {
        eModeCategory?: number;
        liquidationBonus?: number;
        label?: string;
        liquidationThreshold?: number;
        priceSource?: string;
        ltv?: number;
    }>;
    poolConfig?: {
        oracle?: string;
        pool?: string;
        poolAddressesProvider?: string;
        poolConfigurator?: string;
        poolConfiguratorImpl?: string;
        poolImpl?: string;
        protocolDataProvider?: string;
    };
    chainId?: 1 | 10 | 137 | 250 | 42161 | 43114;
}>;
type AaveV3Snapshot = z.infer<typeof aaveV3SnapshotSchema>;

declare function diffReports<A extends AaveV3Snapshot, B extends AaveV3Snapshot>(pre: A, post: B): Promise<string>;

export { diffReports };
