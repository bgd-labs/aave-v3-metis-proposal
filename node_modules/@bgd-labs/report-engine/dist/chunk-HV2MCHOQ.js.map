{"version":3,"sources":["../src/renderer/reserve.ts","../src/utils/diff.ts","../src/diffReports.ts"],"sourcesContent":["import { AaveV3Reserve } from \"../types\";\n\nexport enum CHAIN_ID {\n  MAINNET = 1,\n}\n\nexport const getBlockExplorerLink = {\n  [CHAIN_ID.MAINNET]: (address) =>\n    `[${address}](https://etherscan.io/address/${address})`,\n};\n\nexport function renderValue<T extends keyof AaveV3Reserve>(\n  key: T,\n  reserve: AaveV3Reserve,\n  chainId: CHAIN_ID\n) {\n  if (\n    [\n      \"reserveFactor\",\n      \"liquidationProtocolFee\",\n      \"liquidationThreshold\",\n      \"ltv\",\n    ].includes(key)\n  )\n    return `${(reserve[key] as number) / 100} %`;\n  if ([\"supplyCap\", \"borrowCap\"].includes(key))\n    return `${reserve[key].toLocaleString(\"en-US\")} ${reserve.symbol}`;\n  if (key === \"liquidationBonus\")\n    return `${((reserve[key] as number) - 10000) / 100} %`;\n  if (typeof reserve[key] === \"number\")\n    return reserve[key].toLocaleString(\"en-US\");\n  if (typeof reserve[key] === \"string\" && /0x.+/.test(reserve[key] as string))\n    return getBlockExplorerLink[chainId](reserve[key]);\n  return reserve[key];\n}\n\nfunction renderReserveHeadline(reserve: AaveV3Reserve, chainId: CHAIN_ID) {\n  return `#### ${reserve.symbol} (${getBlockExplorerLink[chainId](\n    reserve.underlying\n  )})\\n\\n`;\n}\n\nconst ORDER: (keyof AaveV3Reserve)[] = [\"supplyCap\", \"borrowCap\"];\nfunction sortReserveKeys(a: keyof AaveV3Reserve, b: keyof AaveV3Reserve) {\n  const indexA = ORDER.indexOf(a);\n  const indexB = ORDER.indexOf(b);\n  if (indexA != -1 && indexB != -1) {\n    if (indexA > indexB) {\n      return 1;\n    }\n    if (indexB > indexA) {\n      return -1;\n    }\n  }\n  if (indexA != -1) return -1;\n  if (indexB != -1) return -1;\n  return a.localeCompare(b);\n}\n\nfunction renderReserveConfig(reserve: AaveV3Reserve, chainId: CHAIN_ID) {\n  let content = \"\";\n  const OMIT_KEYS: (keyof AaveV3Reserve)[] = [\n    \"underlying\", // already rendered in the header\n    \"symbol\", // already rendered in the header\n  ];\n  (Object.keys(reserve) as (keyof AaveV3Reserve)[])\n    .filter((key) => !OMIT_KEYS.includes(key))\n    .sort(sortReserveKeys)\n    .map((key) => {\n      content += `| ${key} | ${renderValue(key, reserve, chainId)} |\\n`;\n    });\n  return content;\n}\n\nexport type ReserveConfigDiff<A extends AaveV3Reserve = AaveV3Reserve> = {\n  [key in keyof A]: A[key] & { from: A[key] | null; to: A[key] | null };\n};\n\nfunction renderReserveConfigDiff(\n  reserve: ReserveConfigDiff,\n  chainId: CHAIN_ID\n) {\n  let content = \"\";\n  (Object.keys(reserve) as (keyof AaveV3Reserve)[])\n    .filter((key) => reserve[key].from)\n    .sort(sortReserveKeys)\n    .map((key) => {\n      content += `| ${key} | ${renderValue(\n        key,\n        { ...reserve, [key]: reserve[key].from },\n        chainId\n      )} | ${renderValue(\n        key,\n        { ...reserve, [key]: reserve[key].to },\n        chainId\n      )} |\\n`;\n    });\n  return content;\n}\n\n/**\n * Renders a full reserve\n * @param reserve\n * @param chainId\n */\nexport function renderReserve(reserve: AaveV3Reserve, chainId: CHAIN_ID) {\n  let content = renderReserveHeadline(reserve, chainId);\n  content += renderReserveConfig(reserve, chainId);\n  return content;\n}\n\nexport function renderReserveDiff(diff: ReserveConfigDiff, chainId: CHAIN_ID) {\n  let content = renderReserveHeadline(diff as AaveV3Reserve, chainId);\n\n  content += renderReserveConfigDiff(diff, chainId);\n  return content;\n}\n","/**\n * Highly inspired by - reimplemented a bit simpler & added types\n * @license MIT https://github.com/omgaz/diffler\n * Author: Gary Chisholm @omgaz\n */\n\nexport type Difference<\n  A extends Record<string, any>,\n  B extends Record<string, any>\n> = { [key in keyof Omit<A, keyof B>]: { from: A[key]; to: null } } & {\n  [key in keyof Omit<B, keyof A>]: { from: null; to: B[key] };\n};\n\nexport type DiffOutput<\n  A extends Record<string, any>,\n  B extends Record<string, any>\n> = {\n  [key in keyof (A | B)]: DiffOutput<A[key], B[key]>;\n} & Difference<A, B>;\n\nexport function diff<\n  T extends Record<string, any>,\n  X extends Record<string, any>\n>(a: T, b: X, removeUnchanged?: boolean): DiffOutput<T, X> {\n  const out = {} as Record<string, any>;\n  for (const key in a) {\n    if (!b.hasOwnProperty(key)) {\n      out[key] = { from: a[key], to: null };\n    } else {\n      if (typeof a[key] === \"object\") {\n        const tempDiff = diff(a[key], b[key], removeUnchanged);\n        if (Object.keys(tempDiff).length > 0) {\n          out[key] = tempDiff;\n        }\n      } else {\n        if (b[key as string] == a[key]) {\n          if (!removeUnchanged) out[key] = a[key];\n        } else {\n          out[key] = { from: a[key], to: b[key] };\n        }\n      }\n    }\n  }\n  for (const key in b) {\n    if (a.hasOwnProperty(key)) continue;\n    out[key] = { from: null, to: b[key] };\n  }\n  return out as DiffOutput<T, X>;\n}\n","import { renderReserve, renderReserveDiff } from \"./renderer/reserve\";\nimport { AaveV3Reserve, AaveV3Snapshot } from \"./types\";\nimport { diff } from \"./utils/diff\";\n\nexport function diffReports<A extends AaveV3Snapshot, B extends AaveV3Snapshot>(\n  pre: A,\n  post: B\n) {\n  const diffResult = diff(pre, post);\n  let content = \"\";\n  const reservesAdded = Object.keys(diffResult.reserves).map((reserveKey) => {\n    // to being present on reserve level % trueish means reserve was added\n    if ((diffResult.reserves[reserveKey] as any).to) {\n      return renderReserve((diffResult.reserves[reserveKey] as any).to, 1);\n    }\n  });\n  const reservesRemoved = Object.keys(diffResult.reserves).map((reserveKey) => {\n    // from being present on reserve level % trueish means reserve was removed\n    if ((diffResult.reserves[reserveKey] as any).from) {\n      return renderReserve((diffResult.reserves[reserveKey] as any).from, 1);\n    }\n  });\n  const reservesAltered = Object.keys(diffResult.reserves).map((reserveKey) => {\n    // from being present on key means reserve was removed\n    if (\n      Object.keys(diffResult.reserves[reserveKey]).find(\n        (fieldKey) =>\n          typeof diffResult.reserves[reserveKey][fieldKey] === \"object\"\n      )\n    ) {\n      return renderReserveDiff(diffResult.reserves[reserveKey] as any, 1);\n    }\n  });\n  if (\n    reservesAdded.length ||\n    reservesRemoved.length ||\n    reservesAltered.length\n  ) {\n    content += \"## Reserve changes\\n\\n\";\n    if (reservesAdded.length) {\n      content += `## ${\n        reservesAdded.length > 1 ? \"Reserve\" : \"Reserves\"\n      } added\\n\\n`;\n      reservesAdded.forEach((report) => {\n        content += report;\n      });\n    }\n\n    if (reservesAltered.length) {\n      content += `## ${\n        reservesAltered.length > 1 ? \"Reserve\" : \"Reserves\"\n      } altered\\n\\n`;\n      reservesAltered.forEach((report) => {\n        content += report;\n      });\n    }\n\n    if (reservesRemoved.length) {\n      content += `## ${\n        reservesRemoved.length > 1 ? \"Reserve\" : \"Reserves\"\n      } removed\\n\\n`;\n      reservesRemoved.forEach((report) => {\n        content += report;\n      });\n    }\n  }\n\n  content += `### Raw diff\\n\\n\\`\\`\\`json\\n${JSON.stringify(\n    diff(pre, post, true),\n    null,\n    2\n  )}\\n\\`\\`\\``;\n  return content;\n}\n"],"mappings":"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","names":["diff"]}